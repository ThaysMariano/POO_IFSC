
/*
 * This source file was generated by the Gradle 'init' task
 */
package ads.poo;

public class App {

    public static void main(String[] args) {


        String[] argsMinusculo = new String[]{args[0].toLowerCase(), args[1].toLowerCase(), args[2].toLowerCase(), args[3].toLowerCase()};
        String[] cores = {"preto", "marrom", "vermelho", "laranja", "amarelo", "verde", "azul", "violeta", "cinza", "branco", "dourado", "prata", " "};


        int[] faixasUmEDois = new int[2];
        double[] faixaTresEQuatro = new double[2];
        double valorTres=0;
        double valorQuatro=0;


        int valorUmDois = 0;

        //Duas primeiras faixas
        for (int i = 0; i < argsMinusculo.length - 2; i++) {
            valorUmDois = 0;
            switch (argsMinusculo[i]) {
                case "preto" -> valorUmDois = 0;
                case "marrom" -> valorUmDois = 1;
                case "vermelho" -> valorUmDois = 2;
                case "laranja" -> valorUmDois = 3;
                case "amarelo" -> valorUmDois = 4;
                case "verde" -> valorUmDois = 5;
                case "azul" -> valorUmDois = 6;
                case "violeta" -> valorUmDois = 7;
                case "cinza" -> valorUmDois = 8;
                case "branco" -> valorUmDois = 9;
                default ->
                        System.out.println("Argumento inválido na faixa "+(i+1)+". Digite apenas cores válidas como: preto, marrom, vermelho, amarelo, laranja, verde, azul, violeta, cinza ou branco na ordem que aparecem em seu resistor, da esquerda para a direita.");
            }
            faixasUmEDois[i] = valorUmDois;
        }

        //terceira faixa
        switch (argsMinusculo[2]) {
            case "preto" -> valorTres = 1;
            case "marrom" -> valorTres = 10;
            case "vermelho" -> valorTres = 100;
            case "laranja" -> valorTres = 1000;
            case "amarelo" -> valorTres = 10000;
            case "verde" -> valorTres = 100000;
            case "azul" -> valorTres = 1000000;
            case "violeta" -> valorTres = 10000000;
            case "cinza" -> valorTres = 100000000;
            case "branco" -> valorTres = 1000000000;
            case "dourado" -> valorTres = 0.1;
            case "prata" -> valorTres = 0.01;
            default -> {
                System.out.println("Argumento inválido na faixa 3. Digite apenas cores válidas como: preto, marrom, vermelho, amarelo, laranja, verde, azul, violeta, cinza, branco, prata ou dourado na ordem que aparecem em seu resistor, da esquerda para a direita.");
            }
        }
        faixaTresEQuatro[0] = valorTres;

        //quarta faixa
        switch (argsMinusculo[3]) {
            case "preto" -> valorQuatro = 0;
            case "marrom" -> valorQuatro = 1;
            case "vermelho" -> valorQuatro = 2;
            case "verde" -> valorQuatro = 0.5;
            case "azul" -> valorQuatro = 0.25;
            case "violeta" -> valorQuatro = 0.1;
            case "cinza" -> valorQuatro = 0.05;
            case "dourado" -> valorQuatro = 5;
            case "prata" -> valorQuatro = 10;
            case " " -> valorQuatro = 20;
            default -> {
                System.out.println("Argumento inválido na faixa 4. Digite apenas cores válidas como: preto, marrom, vermelho, verde, azul, violeta, cinza, branco, prata, dourado ou  \" \"  na ordem que aparecem em seu resistor, da esquerda para a direita.");
            }
        }
        faixaTresEQuatro[1] = valorQuatro;

        String juntarUMEDois = "" + faixasUmEDois[0] + faixasUmEDois[1];
        double primeiroValor = Integer.parseInt(juntarUMEDois);

        double resistencia = primeiroValor * faixaTresEQuatro[0];



        if (!verificaCores(argsMinusculo, cores)){
            System.out.printf("Valor da resistência: %.0f Ohms com tolerância de %.2f%%.", resistencia, faixaTresEQuatro[1]);
        } else {
            System.out.print(" ");
        }
    }

        public static boolean verificaCores (String[] argsMinusculo, String[] cores){

            boolean coresCertas =false;
            boolean todasCoresCertas =false;

            //ver cor a cor
            for (int i = 0; i < argsMinusculo.length; i++) {
                coresCertas = false;
                for (int j = 0; j < cores.length; j++) {
                    if (argsMinusculo[i].equals(cores[j])) {
                        coresCertas=true;
                        break;
                    }
                }
                //ve se todas as cores sao verdadeiras
                if (!coresCertas){
                    todasCoresCertas = true;
                    break;
                }
            }
            return todasCoresCertas;

        }

    }


