/*
 * This source file was generated by the Gradle 'init' task
 */
package ads.poo;

import org.checkerframework.checker.units.qual.A;
import org.jline.terminal.Terminal;
import org.jline.terminal.TerminalBuilder;
import org.jline.utils.AttributedString;
import org.jline.utils.AttributedStyle;

import java.io.IOException;
import java.util.Random;

public class App {
    static Random r = new Random();
    static Terminal terminal;

    static {
        try {
            terminal = TerminalBuilder.builder().dumb(true).build();
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    static String[] mensagens = {"estourar o espaço do mapa", "sobrepor outro navio"};

    static String[] navios = {"Porta Aviões", "Encouraçado", "Cruzador", "Submarino", "Contratorpedeiro"};
    static char[][] mapa = new char[10][10];

    static char[][] frota = {
            {'P',5,0},
            {'E',4,0},
            {'C',3,0},
            {'S',3,0},
            {'N',2,0},
    };
    static int[][] estatistica = new int[5][2];

    static AttributedString navioFormatado;
    static char navio;
    static int tamanho;
    static int x;
    static int y;
    static int direcao;
    static int cor;
    static int background = 238;

    public static void main(String[] args) {

        for (int i = 0; i < frota.length; i++) {
            navio = frota[i][0];
            tamanho = frota[i][1];
            do{
                x = r.nextInt(10);
                y = r.nextInt(10);
                direcao = r.nextInt(2);
                cor = r.nextInt(256);
                frota[i][2] = (char) cor;
            }while(!posicionar(navio, tamanho, x, y, direcao, i));
        }
        gerarMapa();

        if(args.length > 0){
            if (args[0].equals("analisar")){
                gerarEstatistica();
            }
        }
    }

    public static boolean posicionar(char navio, int tamanho, int x, int y, int direcao, int indexNavio){
        boolean posicionou = true;

        switch(direcao){
            case 0: // Horizontal
                if(x > 10 - tamanho){  // Verifica se o navio cabe no espaço horiental do mapa
                    posicionou = false;
                    estatistica[indexNavio][0]++;
                    break;
                }
                for (int i = x; i < x + tamanho; i++) {
                    if(mapa[y][i] != 0){ // Verifica se existe algum navio em alguma das posições
                        posicionou = false;
                        estatistica[indexNavio][1]++;
                        break;
                    }
                }
                if(posicionou){ //Se o navio couber no espaço horizontal e não tiver outro no mesmo espaço
                    for (int i = x; i < x + tamanho; i++) {
                        mapa[y][i] = navio; //Adiciona o navio no mapa
                    }
                }
                break;
            case 1: // Vertical
                if(y > 10 - tamanho){ // Verifica se o navio cabe no espaço vertical do mapa
                    posicionou = false;
                    estatistica[indexNavio][0]++;
                    break;
                }
                for (int i = y; i < y + tamanho; i++) {
                    if(mapa[i][x] != 0){ // Verifica se existe algum navio em alguma das posições
                        posicionou = false;
                        estatistica[indexNavio][1]++;
                        break;
                    }
                }
                if(posicionou){ //Se o navio couber no espaço vertical e não tiver outro no mesmo espaço
                    for (int i = y; i < y + tamanho; i++) {
                        mapa[i][x] = navio; //Adiciona o navio no mapa
                    }
                }
                break;

        }
        return posicionou;
    }

    public static void gerarMapa(){
        for (int i = 0; i < 10; i++) {
            for (int j = 0; j < 10; j++) {
                if(mapa[i][j] == 0){
                    navioFormatado = new AttributedString(String.format("%s","."),
                            AttributedStyle.DEFAULT.foreground(255).background(background));
                    terminal.writer().print(navioFormatado.toAnsi());
                }else{
                    cor = selecionarCor(mapa[i][j]);
                    navioFormatado = new AttributedString(String.format("%s", mapa[i][j]),
                            AttributedStyle.DEFAULT.foreground(cor).background(background));
                    terminal.writer().print(navioFormatado.toAnsi());
                }
                navioFormatado = new AttributedString(String.format("%s"," "),
                        AttributedStyle.DEFAULT.foreground(255).background(background));
                terminal.writer().print(navioFormatado.toAnsi());
            }
            terminal.writer().println();
        }
        terminal.writer().flush();
    }

    public static int selecionarCor(char navio){
        for (int i = 0; i < frota.length; i++) {
            if(frota[i][0] == navio){
                cor = frota[i][2];
            }
        }
        return cor;
    }

    public static void gerarEstatistica(){
        System.out.println();
        System.out.println("---------- Estatisticas ----------");
        System.out.println();
        for (int i = 0; i < estatistica.length; i++) {
            for (int j = 0; j < estatistica[i].length; j++) {
                if(estatistica[i][j] > 0){
                    System.out.println("O " + navios[i] + " teve " + estatistica[i][j] + " falhas por " + mensagens[j]);
                    System.out.println();
                }
            }
        }
    }

}
